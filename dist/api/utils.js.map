{"version":3,"sources":["../../src/api/utils.js"],"names":["I","K","ifElse","toMaybe","S","prefix","name","router","get","route","middlware","post","run","fn","onResolve","onReject","env","promise","then","catch","positiveInt","otherwise","x","Number","isInteger","toCommonListReq","query","page","take","search","formatValError","error","value"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,MAAM,EAAEA,CAAF,EAAKC,CAAL,EAAQC,MAAR,EAAgBC,OAAhB,KAA4BC,MAAlC;;AAEA;AACO,MAAMC,0BAASC,QAAQC,UAC5BA,OAAOF,MAAP,CAAeC,IAAf,CADK;;AAGP;AACO,MAAME,oBAAMC,SAASC,aAAaH,UACvCA,OAAOC,GAAP,CAAYC,KAAZ,EAAmBC,SAAnB,CADK;;AAGP;AACO,MAAMC,sBAAOF,SAASC,aAAaH,UACxCA,OAAOI,IAAP,CAAaF,KAAb,EAAoBC,SAApB,CADK;;AAGP;AACO,MAAME,oBAAMC,MAAMC,aAAaC,YACpCF,GAAIG,4BAAJ,EAASC,OAAT,GACSC,IADT,CACeJ,SADf,EAESK,KAFT,CAEgBJ,QAFhB,CADK;;AAKP;AACO,MAAMK,oCAAcC,aACzBnB,OAAQoB,KAAK,OAAOA,CAAP,KAAa,QAAb,IACAC,OAAOC,SAAP,CAAkBF,CAAlB,CADA,IAEAA,IAAI,CAFjB,EAGUtB,CAHV,EAGcC,EAAGoB,SAAH,CAHd,CADK;;AAMP;AACO,MAAMI,4CAAkBC,UAAU;AACvCC,QAAMP,YAAa,CAAb,EAAkBM,MAAMC,IAAxB,CADiC;AAEvCC,QAAMR,YAAa,EAAb,EAAkBM,MAAME,IAAxB,CAFiC;AAGvCC,UAAQ1B,QAASuB,MAAMG,MAAf;AAH+B,CAAV,CAAxB;;AAMA,MAAMC,0CAAiBC,UAAU;AACtCA,SAAOA,MAAMC;AADyB,CAAV,CAAvB","file":"utils.js","sourcesContent":["import { S } from '../fun';\r\nimport env from './dependency-resolver';\r\n\r\nconst { I, K, ifElse, toMaybe } = S;\r\n\r\n// prefix :: String -> Router -> Router\r\nexport const prefix = name => router =>\r\n  router.prefix (name);\r\n\r\n// get :: String -> Middleware -> Router -> Router\r\nexport const get = route => middlware => router =>\r\n  router.get (route, middlware);\r\n\r\n// post :: String -> Middleware -> Router -> Router\r\nexport const post = route => middlware => router =>\r\n  router.post (route, middlware);\r\n\r\n// run :: (Env -> Future a b) -> (b -> Middleware) -> (a -> Middleware) -> Middleware\r\nexport const run = fn => onResolve => onReject =>\r\n  fn (env).promise ()\r\n          .then (onResolve)\r\n          .catch (onReject);\r\n\r\n// positiveInt :: Any -> Number -> Number\r\nexport const positiveInt = otherwise =>\r\n  ifElse (x => typeof x === 'number' \r\n            && Number.isInteger (x) \r\n            && x > 0\r\n         ) (I) (K (otherwise));\r\n\r\n// toCommonListReq :: KoaRequest -> CommonListRequest\r\nexport const toCommonListReq = query => ({\r\n  page: positiveInt (1)  (query.page),\r\n  take: positiveInt (10) (query.take),\r\n  search: toMaybe (query.search)\r\n});\r\n\r\nexport const formatValError = error => ({\r\n  error: error.value\r\n});"]}