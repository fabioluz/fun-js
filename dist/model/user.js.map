{"version":3,"sources":["../../src/model/user.js"],"names":["User","constructor","x","id","email","password","fullname","with","obj","newUser","Object","assign","key","of","$User","$","NullaryType","validateUser_A","Future","$ValidationError","encryptUser_A","prop","map","lift3","pipe","eitherToFuture","S","createUser","encrypt","salt","str","encaseN2","bcrypt","hash","validateEmail","notEmpty","validatePassword","validateFullname","validateUser_I","input","transformPassword","user","encryptUser_I","validateUser","encryptUser"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAQA;AACA;AACA;;AAEA,MAAMA,IAAN,CAAW;AACTC,cAAaC,CAAb,EAAgB;AACd,SAAKC,EAAL,GAAUD,EAAEC,EAAZ;AACA,SAAKC,KAAL,GAAaF,EAAEE,KAAf;AACA,SAAKC,QAAL,GAAgBH,EAAEG,QAAlB;AACA,SAAKC,QAAL,GAAgBJ,EAAEI,QAAlB;AACD;;AAEDC,OAAMC,GAAN,EAAW;AACT,UAAMC,UAAUC,OAAOC,MAAP,CAAe,EAAf,EAAmB,IAAnB,CAAhB;AACA,SAAK,IAAIC,GAAT,IAAgBJ,GAAhB,EAAqB;AACnBC,cAAQG,GAAR,IAAeJ,IAAII,GAAJ,CAAf;AACD;;AAED,WAAOZ,KAAKa,EAAL,CAASJ,OAAT,CAAP;AACD;;AAED,SAAOI,EAAP,CAAWX,CAAX,EAAc;AACZ,WAAO,IAAIF,IAAJ,CAAUE,CAAV,CAAP;AACD;AAnBQ;;AAsBX,MAAMY,QAAQC,OAAEC,WAAF,CACX,aADW,EAEX,EAFW,EAGXd,KAAKA,aAAaF,IAHP,CAAd;;AAOA;AACA;AACA;;AAEA,MAAMiB,iBAAiB,CAAEF,OAAEL,MAAJ,EAAYK,OAAEG,MAAF,CAAUC,uBAAV,EAA6BL,KAA7B,CAAZ,CAAvB;;AAEA,MAAMM,gBAAgB,CAAEN,KAAF,EAASC,OAAEG,MAAF,CAAUC,uBAAV,EAA6BL,KAA7B,CAAT,CAAtB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAEO,IAAF,EAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,cAA1B,KAA6CC,MAAnD;;AAEA;AACA,MAAMC,aAAavB,SAASC,YAAYC,YACtCN,KAAKa,EAAL,CAAS,EAAEV,IAAI,kBAAN,EAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,QAAhC,EAAT,CADF;;AAGA;AACA,MAAMsB,UAAUC,QAAQC,OACtBZ,YAAOa,QAAP,CAAiBC,mBAAOC,IAAxB,EAA+BH,GAA/B,EAAqCD,IAArC,CADF;;AAGA;AACA,MAAMK,gBAAgB,sCACC,CAACC,0BAAD,EAAW,iCAAW,EAAX,CAAX,EAA2B/B,uBAA3B,CADD,EAEC,OAFD,CAAtB;;AAIA;AACA,MAAMgC,mBAAmB,sCACC,CAACD,0BAAD,EAAW,iCAAW,CAAX,CAAX,EAA0B,iCAAW,EAAX,CAA1B,CADD,EAEC,UAFD,CAAzB;;AAIA;AACA,MAAME,mBAAmB,sCACC,CAACF,0BAAD,EAAW,iCAAW,EAAX,CAAX,CADD,EAEC,UAFD,CAAzB;;AAIA;AACA,MAAMG,iBAAiBC,SACrBd,eACEF,MAAOI,UAAP,EACOO,cAAeK,MAAMnC,KAArB,CADP,EAEOgC,iBAAkBG,MAAMlC,QAAxB,CAFP,EAGOgC,iBAAkBE,MAAMjC,QAAxB,CAHP,CADF,CADF;;AAQA;AACA,MAAMkC,oBAAoBC,QAAQpC,YAChCoC,KAAKlC,IAAL,CAAW,EAAEF,QAAF,EAAX,CADF;;AAGA;AACA,MAAMqC,gBAAgBD,QACpBjB,KAAM,CACJH,KAAM,UAAN,CADI,EAEJO,QAAS,EAAT,CAFI,EAGJN,IAAKkB,kBAAmBC,IAAnB,CAAL,CAHI,CAAN,EAIIA,IAJJ,CADF;;AASA;AACA;AACA;;AAEA,MAAME,eACJ,cAAK,cAAL,EACK,EADL,EAEK1B,cAFL,EAGKqB,cAHL,CADF;;AAMA,MAAMM,cACJ,cAAK,aAAL,EACK,EADL,EAEKxB,aAFL,EAGKsB,aAHL,CADF;;QAOE1C,I,GAAAA,I;QACAc,K,GAAAA,K;QACA6B,Y,GAAAA,Y;QACAC,W,GAAAA,W","file":"user.js","sourcesContent":["import UUID from 'uuid/v4';\r\nimport bcrypt from 'bcryptjs';\r\nimport { $, S, Future, def } from '../fun';\r\nimport { $ValidationError } from '../common/types/error';\r\nimport { \r\n  validateString, \r\n  notEmpty, \r\n  minLength, \r\n  maxLength,\r\n  email\r\n} from '../common/validation/string-validators';\r\n\r\n////////////////////////////////////////////////////\r\n//  Class Definition\r\n////////////////////////////////////////////////////\r\n\r\nclass User {\r\n  constructor (x) {\r\n    this.id = x.id;\r\n    this.email = x.email;\r\n    this.password = x.password;\r\n    this.fullname = x.fullname;\r\n  }\r\n\r\n  with (obj) {\r\n    const newUser = Object.assign ({}, this);\r\n    for (let key in obj) {\r\n      newUser[key] = obj[key];\r\n    }\r\n\r\n    return User.of (newUser);\r\n  }\r\n\r\n  static of (x) {\r\n    return new User (x);\r\n  }\r\n}\r\n\r\nconst $User = $.NullaryType \r\n  ('fun_js/User')\r\n  ('') \r\n  (x => x instanceof User);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Algebra\r\n////////////////////////////////////////////////////\r\n\r\nconst validateUser_A = [ $.Object, $.Future ($ValidationError) ($User) ];\r\n\r\nconst encryptUser_A = [ $User, $.Future ($ValidationError) ($User) ];\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Interpreter\r\n////////////////////////////////////////////////////\r\n\r\nconst { prop, map, lift3, pipe, eitherToFuture } = S;\r\n\r\n// createUser :: String -> String -> String -> User\r\nconst createUser = email => password => fullname => \r\n  User.of ({ id: UUID (), email, password, fullname });\r\n\r\n// encrypt :: Number -> String -> Future Error String\r\nconst encrypt = salt => str => \r\n  Future.encaseN2 (bcrypt.hash) (str) (salt);\r\n\r\n// validateEmail :: String -> Either ValidationError String\r\nconst validateEmail = validateString\r\n                      ([notEmpty, maxLength (50), email])\r\n                      ('Email');\r\n\r\n// validatePassword :: String -> Either ValidationError String\r\nconst validatePassword = validateString \r\n                         ([notEmpty, minLength (6), maxLength (50)])\r\n                         ('Password');\r\n\r\n// validateFullname :: String -> Either ValidationError String\r\nconst validateFullname = validateString \r\n                         ([notEmpty, maxLength (50)])\r\n                         ('Fullname');\r\n\r\n// validateUser_I :: Object -> Future ValidationError User\r\nconst validateUser_I = input => \r\n  eitherToFuture (\r\n    lift3 (createUser)\r\n          (validateEmail (input.email))\r\n          (validatePassword (input.password))\r\n          (validateFullname (input.fullname))\r\n  );\r\n\r\n// transformPassword :: User -> String -> User\r\nconst transformPassword = user => password => \r\n  user.with ({ password });\r\n\r\n// encryptUser_I :: User -> Future ValidationError User\r\nconst encryptUser_I = user => \r\n  pipe ([\r\n    prop ('password'),\r\n    encrypt (10),\r\n    map (transformPassword (user))\r\n  ]) (user);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Export \r\n////////////////////////////////////////////////////\r\n\r\nconst validateUser = \r\n  def ('validateUser')\r\n      ({})\r\n      (validateUser_A)\r\n      (validateUser_I); \r\n\r\nconst encryptUser =\r\n  def ('encryptUser')\r\n      ({})\r\n      (encryptUser_A)\r\n      (encryptUser_I);\r\n\r\nexport {\r\n  User,\r\n  $User,\r\n  validateUser,\r\n  encryptUser\r\n}"]}