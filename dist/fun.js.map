{"version":3,"sources":["../src/fun.js"],"names":["S","Sanctuary","create","checkTypes","process","env","NODE_ENV","concat","FutureTypes","def","$","a","TypeVariable","b","Either","EitherType","Maybe","MaybeType","Future","FutureType","chainRej","curry2","fn","future","replace","curry3","key","replacement","str","lift4","curry4","a1","a2","a3","a4","Z","ap","map","eitherToFuture","either","reject","of","invoke","fnName","arg","obj"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,IAAIC,oBAAUC,MAAV,CAAkB;AAC1BC,cAAYC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YADX;AAE1BD,OAAKJ,oBAAUI,GAAV,CAAcE,MAAd,CAAsBC,gCAAYH,GAAlC;AAFqB,CAAlB,CAAV;;AAKA,MAAMI,MAAMC,uBAAER,MAAF,CAAU;AACpBC,cAAYC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YADjB;AAEpBD,OAAKK,uBAAEL,GAAF,CAAME,MAAN,CAAcC,gCAAYH,GAA1B;AAFe,CAAV,CAAZ;;AAKAK,uBAAEC,CAAF,GAAMD,uBAAEE,YAAF,CAAgB,GAAhB,CAAN;AACAF,uBAAEG,CAAF,GAAMH,uBAAEE,YAAF,CAAgB,GAAhB,CAAN;AACAF,uBAAEI,MAAF,GAAWd,EAAEe,UAAb;AACAL,uBAAEM,KAAF,GAAUhB,EAAEiB,SAAZ;AACAP,uBAAEQ,MAAF,GAAWV,gCAAYW,UAAvB;;AAEA;AACAnB,EAAEoB,QAAF,GAAapB,EAAEqB,MAAF,CAAU,CAACC,EAAD,EAAKC,MAAL,KAAgBA,OAAOH,QAAP,CAAiBE,EAAjB,CAA1B,CAAb;AACAtB,EAAEwB,OAAF,GAAYxB,EAAEyB,MAAF,CAAS,CAACC,GAAD,EAAMC,WAAN,EAAmBC,GAAnB,KAA2BA,IAAIJ,OAAJ,CAAaE,GAAb,EAAkBC,WAAlB,CAApC,CAAZ;AACA3B,EAAE6B,KAAF,GAAU7B,EAAE8B,MAAF,CAAU,CAACR,EAAD,EAAKS,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,KAAwBC,+BAAEC,EAAF,CAAMD,+BAAEC,EAAF,CAAMD,+BAAEC,EAAF,CAAMD,+BAAEE,GAAF,CAAOf,EAAP,EAAWS,EAAX,CAAN,EAAsBC,EAAtB,CAAN,EAAiCC,EAAjC,CAAN,EAA4CC,EAA5C,CAAlC,CAAV;AACAlC,EAAEsC,cAAF,GAAmBtC,EAAEuC,MAAF,CAAUrB,kBAAOsB,MAAjB,EAA0BtB,kBAAOuB,EAAjC,CAAnB;AACAzC,EAAE0C,MAAF,GAAWC,UAAUC,OAAOC,OAAOA,IAAIF,MAAJ,EAAaC,GAAb,CAAnC;;QAGElC,C,GAAAA,sB;QACAV,C,GAAAA,C;QACAS,G,GAAAA,G;QACAS,M,GAAAA,iB","file":"fun.js","sourcesContent":["import Sanctuary from 'sanctuary';\r\nimport $ from 'sanctuary-def';\r\nimport Z from 'sanctuary-type-classes';\r\nimport Future from 'fluture';\r\nimport FutureTypes from 'fluture-sanctuary-types';\r\n\r\nconst S = Sanctuary.create ({\r\n  checkTypes: process.env.NODE_ENV !== 'production',\r\n  env: Sanctuary.env.concat (FutureTypes.env)\r\n});\r\n\r\nconst def = $.create ({\r\n  checkTypes: process.env.NODE_ENV !== 'production',\r\n  env: $.env.concat (FutureTypes.env)\r\n});\r\n\r\n$.a = $.TypeVariable ('a');\r\n$.b = $.TypeVariable ('b');\r\n$.Either = S.EitherType;\r\n$.Maybe = S.MaybeType;\r\n$.Future = FutureTypes.FutureType;\r\n\r\n// Extensions\r\nS.chainRej = S.curry2 ((fn, future) => future.chainRej (fn));\r\nS.replace = S.curry3((key, replacement, str) => str.replace (key, replacement));\r\nS.lift4 = S.curry4 ((fn, a1, a2, a3, a4) => Z.ap (Z.ap (Z.ap (Z.map (fn, a1), a2), a3), a4));\r\nS.eitherToFuture = S.either (Future.reject) (Future.of);\r\nS.invoke = fnName => arg => obj => obj[fnName] (arg); \r\n\r\nexport {\r\n  $,\r\n  S,\r\n  def,\r\n  Future\r\n}"]}