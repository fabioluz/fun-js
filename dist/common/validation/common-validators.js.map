{"version":3,"sources":["../../../src/common/validation/common-validators.js"],"names":["$ValErrorOrMaybeA","$","Either","$ValidationError","Maybe","a","$ValErrorOrAny","Any","$ValFn","Function","transform_A","String","format_A","validate_A","Array","replace","map","mapLeft","pipeK","compose","isRight","ifElse","toMaybe","maybeToNullable","Right","S","transform_I","key","replacement","error","ValidationError","of","value","transform","format_I","format","validate_I","fns","validate"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA,MAAMA,oBAAoBC,OAAEC,MAAF,CAAUC,uBAAV,EAA6BF,OAAEG,KAAF,CAASH,OAAEI,CAAX,CAA7B,CAA1B;AACA,MAAMC,iBAAiBL,OAAEC,MAAF,CAAUC,uBAAV,EAA6BF,OAAEM,GAA/B,CAAvB;AACA,MAAMC,SAASP,OAAEQ,QAAF,CAAY,CAACR,OAAEM,GAAH,EAAQP,iBAAR,CAAZ,CAAf;;AAIA;AACA;AACA;;AAEA,MAAMU,cAAc,CAAET,OAAEU,MAAJ,EAAYV,OAAEU,MAAd,EAAsBR,uBAAtB,EAAwCA,uBAAxC,CAApB;;AAEA,MAAMS,WAAW,CAAEX,OAAEU,MAAJ,EAAYX,iBAAZ,EAA+BM,cAA/B,CAAjB;;AAEA,MAAMO,aAAa,CAAEZ,OAAEa,KAAF,CAASN,MAAT,CAAF,EAAoBP,OAAEU,MAAtB,EAA8BV,OAAEM,GAAhC,EAAqCD,cAArC,CAAnB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAES,OAAF,EAAWC,GAAX,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkDC,MAAlD;AACEC,SADF,EACWC,eADX,EAC4BC,KAD5B,KACsCC,MAD5C;;AAGA;AACA,MAAMC,cAAcC,OAAOC,eAAeC,SACxCC,uBAAgBC,EAAhB,CAAoBhB,QAASY,GAAT,EAAeC,WAAf,EAA6BC,MAAMG,KAAnC,CAApB,CADF;;AAGA,MAAMC,YAAY,cAAK,WAAL,EAAmB,EAAnB,EAAwBvB,WAAxB,EAAsCgB,WAAtC,CAAlB;;AAEA;AACA,MAAMQ,WAAWP,OACfN,OAAQD,OAAR,EACQJ,IAAKO,eAAL,CADR,EAEQN,QAASgB,UAAW,MAAX,EAAoBN,GAApB,CAAT,CAFR,CADF;;AAKA,MAAMQ,SAAS,cAAK,QAAL,EAAgB,EAAhB,EAAqBvB,QAArB,EAAgCsB,QAAhC,CAAf;;AAEA;AACA,MAAME,aAAaC,OAAOV,OAAOK,SAC/Bb,QAASgB,OAAQR,GAAR,CAAT,EACST,MAAOmB,GAAP,CADT,EAESb,MAAOF,QAASU,KAAT,CAAP,CAFT,CADF;;AAKO,MAAMM,8BACX,cAAK,UAAL,EACK,EADL,EAEKzB,UAFL,EAGKuB,UAHL,CADK","file":"common-validators.js","sourcesContent":["import { $, S, def } from '../../fun';\r\nimport { $ValidationError, ValidationError } from '../types/error';\r\n\r\n// type aliases\r\nconst $ValErrorOrMaybeA = $.Either ($ValidationError) ($.Maybe ($.a));\r\nconst $ValErrorOrAny = $.Either ($ValidationError) ($.Any);\r\nconst $ValFn = $.Function ([$.Any, $ValErrorOrMaybeA]);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Algebra\r\n////////////////////////////////////////////////////\r\n\r\nconst transform_A = [ $.String, $.String, $ValidationError, $ValidationError ];\r\n\r\nconst format_A = [ $.String, $ValErrorOrMaybeA, $ValErrorOrAny ];\r\n\r\nconst validate_A = [ $.Array ($ValFn), $.String, $.Any, $ValErrorOrAny ];\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Interpreter\r\n////////////////////////////////////////////////////\r\n\r\nconst { replace, map, mapLeft, pipeK, compose, isRight, ifElse, \r\n        toMaybe, maybeToNullable, Right } = S;\r\n\r\n// transform_I :: String -> String -> ValidationError -> ValidationError\r\nconst transform_I = key => replacement => error =>\r\n  ValidationError.of (replace (key) (replacement) (error.value));\r\n\r\nconst transform = def ('transform') ({}) (transform_A) (transform_I);\r\n\r\n// format_I :: String -> Either ValidationError (Maybe a) -> Either ValidationError a\r\nconst format_I = key =>\r\n  ifElse (isRight)\r\n         (map (maybeToNullable))\r\n         (mapLeft (transform ('$key') (key)));\r\n\r\nconst format = def ('format') ({}) (format_A) (format_I);\r\n   \r\n// validate_I :: [(Maybe a -> Either ValidationError (Maybe a))] -> String -> a -> Either ValidationError a\r\nconst validate_I = fns => key => value => \r\n  compose (format (key))\r\n          (pipeK (fns))\r\n          (Right (toMaybe (value)));\r\n\r\nexport const validate = \r\n  def ('validate') \r\n      ({}) \r\n      (validate_A)\r\n      (validate_I);"]}