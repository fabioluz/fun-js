{"version":3,"sources":["../../../src/common/validation/string-validators.js"],"names":["$ValErrorOrMaybeString","$","Either","$ValidationError","Maybe","String","$ValErrorOrString","$ValFn","Function","Any","validateString_A","Array","notEmpty_A","minLength_A","Number","maxLength_A","email_A","prop","concat","isNothing","isJust","maybe","ifElse","Right","Left","S","length","includes","term","x","toError","msg","_","ValidationError","of","string","value","validateString_I","fns","notEmpty_I","minLength_I","len","maxLength_I","email_I","validateString","notEmpty","minLength","maxLength","email"],"mappings":"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","file":"string-validators.js","sourcesContent":["import { $, S, def } from '../../fun';\r\nimport { $ValidationError, ValidationError } from '../types/error';\r\nimport { validate } from '../validation/common-validators';\r\n\r\n// type aliases\r\nconst $ValErrorOrMaybeString = $.Either ($ValidationError) ($.Maybe ($.String));\r\nconst $ValErrorOrString = $.Either ($ValidationError) ($.String);\r\nconst $ValFn = $.Function ([$.Maybe ($.Any), $ValErrorOrMaybeString]);\r\n\r\n////////////////////////////////////////////////////\r\n//  Algebra\r\n////////////////////////////////////////////////////\r\n\r\nconst validateString_A = [ $.Array ($ValFn), $.String, $.Any, $ValErrorOrString ];\r\n\r\nconst notEmpty_A = [ $.Maybe ($.String), $ValErrorOrMaybeString ];\r\n\r\nconst minLength_A = [ $.Number, $.Maybe ($.String), $ValErrorOrMaybeString ];\r\n\r\nconst maxLength_A = [ $.Number, $.Maybe ($.String), $ValErrorOrMaybeString ];\r\n\r\nconst email_A = [ $.Maybe ($.String), $ValErrorOrMaybeString ];\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Helpers\r\n////////////////////////////////////////////////////\r\n\r\nconst { prop, concat, isNothing, isJust, maybe, ifElse, Right, Left } = S;\r\n\r\n// length :: Maybe String -> Number\r\nconst length = maybe (0) (prop ('length'));\r\n\r\n// includes :: String -> Maybe String -> Boolean\r\nconst includes = term => \r\n  maybe (false) (x => x.includes (term));\r\n\r\n// toError :: String -> a -> Either ValidationError a\r\nconst toError = msg => _ => \r\n  Left (ValidationError.of (msg));\r\n\r\n// string :: Maybe Any -> Either ValidationError (Maybe String)\r\nconst string = \r\n  ifElse (x => isNothing (x) || typeof x.value === 'string')\r\n         (Right)\r\n         (toError ('$key must be a string'));\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Interpreter\r\n////////////////////////////////////////////////////\r\n\r\n// validateString_I :: [ValFn] -> String -> Any -> Either ValidationError String\r\nconst validateString_I = fns => \r\n  validate (concat ([string]) (fns));\r\n\r\n// notEmpty_I :: Maybe String -> Either ValidationError (Maybe String)\r\nconst notEmpty_I = \r\n  ifElse (x => isJust (x) && x.value !== '')\r\n         (Right)\r\n         (toError ('$key is required'));\r\n\r\n// minLength_I :: Number -> Maybe String -> Either ValidationError (Maybe String)\r\nconst minLength_I = len =>\r\n  ifElse (x => isNothing (x) || length (x) >= len)\r\n         (Right)\r\n         (toError (`$key cannot be shorter than ${len} characters`));\r\n\r\n// maxLength_I :: Number -> Maybe String -> Either ValidationError (Maybe String)\r\nconst maxLength_I = len =>\r\n  ifElse (x => isNothing (x) || length (x) <= len)\r\n         (Right)\r\n         (toError (`$key cannot be longer than ${len} characters`));\r\n\r\n// email_I :: Maybe String -> Either ValidationError (Maybe String)\r\nconst email_I =\r\n  ifElse (x => isNothing (x) || includes ('@') (x))\r\n         (Right)\r\n         (toError (`$key should be a valid email`));\r\n\r\n\r\n         \r\n////////////////////////////////////////////////////\r\n//  Export\r\n////////////////////////////////////////////////////\r\n\r\nexport const validateString = \r\n  def ('validateString')\r\n      ({})\r\n      (validateString_A)\r\n      (validateString_I);\r\n\r\nexport const notEmpty = \r\n  def ('notEmpty')\r\n      ({})\r\n      (notEmpty_A)\r\n      (notEmpty_I);\r\n\r\nexport const minLength = \r\n  def ('minLength')\r\n      ({})\r\n      (minLength_A)\r\n      (minLength_I);\r\n\r\nexport const maxLength =\r\n  def ('maxLength')\r\n      ({})\r\n      (maxLength_A)\r\n      (maxLength_I);\r\n\r\nexport const email =\r\n  def ('email')\r\n      ({})\r\n      (email_A)\r\n      (email_I);\r\n\r\n"]}