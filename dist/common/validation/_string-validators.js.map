{"version":3,"sources":["../../../src/common/validation/_string-validators.js"],"names":["$ValErrorOrMaybeString","$","$Either","$ValidationError","$Maybe","String","$ValErrorOrString","$ValFn","Function","Any","defValidateString","Array","defNotEmpty","defMinLength","defMaxLength","defEmail","interpreter","concat","isNothing","isJust","maybe","Right","Left","S","length","prop","includes","term","x","string","mbAny","value","msg","ValidationError","of","validateString","fns","notEmpty","mbStr","minLength","len","maxLength","email","I"],"mappings":"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","file":"_string-validators.js","sourcesContent":["import { $, S, ValidationError, def } from '../../fun';\r\nimport { validate } from '../validation/_common-validators';\r\n\r\n//\r\n//  Algebra\r\n//\r\n\r\n// type alias\r\nconst $ValErrorOrMaybeString = $.$Either ($.$ValidationError) ($.$Maybe ($.String));\r\nconst $ValErrorOrString = $.$Either ($.$ValidationError) ($.String);\r\nconst $ValFn = $.Function ([$.$Maybe ($.Any), $ValErrorOrMaybeString]);\r\n\r\n// functions\r\nconst defValidateString = def ('validateString') ({}) ([ $.Array ($ValFn), $.String, $.Any, $ValErrorOrString ]);\r\nconst defNotEmpty       = def ('notEmpty')       ({}) ([ $.$Maybe ($.String), $ValErrorOrMaybeString ]);\r\nconst defMinLength      = def ('minLength')      ({}) ([ $.$Maybe ($.String), $ValErrorOrMaybeString ]);\r\nconst defMaxLength      = def ('maxLength')      ({}) ([ $.$Maybe ($.String), $ValErrorOrMaybeString ]);\r\nconst defEmail          = def ('email')          ({}) ([ $.$Maybe ($.String), $ValErrorOrMaybeString ]);\r\n\r\n\r\n//\r\n//  Interpreter\r\n//  \r\n\r\nfunction interpreter() {\r\n\r\n  const { concat, isNothing, isJust, maybe, Right, Left } = S;\r\n\r\n  // length :: Maybe String -> Number\r\n  const length = maybe (0) (prop ('length'));\r\n\r\n  // includes :: String -> Maybe String -> Boolean\r\n  const includes = term => maybe (false) (x => x.includes (term));\r\n\r\n  // string :: Maybe Any -> Either ValidationError (Maybe String)\r\n  const string = mbAny => {\r\n    if (isNothing (mbAny) || typeof mbAny.value === 'string') {\r\n      return Right (mbAny);\r\n    }\r\n\r\n    const msg = '$key must be a string';\r\n    return Left (ValidationError.of (msg));\r\n  };\r\n\r\n  // validateString :: [ValFn] -> String -> Any -> Either ValidationError String\r\n  const validateString = fns => validate (concat ([string]) (fns));\r\n\r\n  // notEmpty :: Maybe String -> Either ValidationError (Maybe String)\r\n  const notEmpty = mbStr => {\r\n    if (isJust (mbStr) && mbStr.value !== '') {\r\n      return Right (mbStr);\r\n    }\r\n\r\n    const msg = '$key is required';\r\n    return Left (ValidationError.of (msg));\r\n  };\r\n\r\n  // minLength :: Number -> Maybe String -> Either ValidationError (Maybe String)\r\n  const minLength = len => mbStr => {\r\n    if (isNothing (mbStr) || length (mbStr) >= len) {\r\n      return Right (mbStr);\r\n    }\r\n\r\n    const msg = `$key cannot be shorter than ${len} characters`;\r\n    return Left (ValidationError.of (msg));\r\n  };\r\n\r\n  // maxLength :: Number -> Maybe String -> Either ValidationError (Maybe String)\r\n  const maxLength = len => mbStr => {\r\n    if (isNothing (mbStr) || length (mbStr) <= len) {\r\n      return Right (mbStr);\r\n    }\r\n\r\n    const msg = `$key cannot be longer than ${len} characters`;\r\n    return Left (ValidationError.of (msg));\r\n  };\r\n\r\n  // email :: Maybe String -> Either ValidationError (Maybe String)\r\n  const email = mbStr => {\r\n    if (isNothing (mbStr) || includes ('@') (mbStr)) {\r\n      return Right (mbStr);\r\n    }\r\n\r\n    const msg = `$key should be a valid email`;\r\n    return Left (ValidationError.of (msg));\r\n  };\r\n\r\n  return {\r\n    validateString,\r\n    notEmpty,\r\n    minLength,\r\n    maxLength,\r\n    email\r\n  };\r\n}\r\n\r\n\r\n//\r\n//  Export\r\n//\r\n\r\nconst I = interpreter();\r\n\r\nconst validateString = defValidateString (I.validateString);\r\nconst notEmpty       = defNotEmpty (I.notEmpty);\r\nconst minLength      = defMinLength (I.minLength);\r\nconst maxLength      = defMaxLength (I.maxLength);\r\nconst email          = defEmail (I.email);\r\n\r\nexport {\r\n  validateString,\r\n  notEmpty,\r\n  minLength,\r\n  maxLength,\r\n  email\r\n};\r\n\r\n"]}