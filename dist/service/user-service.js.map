{"version":3,"sources":["../../src/service/user-service.js"],"names":["getAll_A","$CommonListRequest","$Env","$","Future","$AppError","Array","$UserResponse","create_A","Object","map","invoke","pipe","pipeK","S","getUserRepository","env","repositories","user","insertUser","UserResponse","of","getAll_I","input","create_I","validateUser","encryptUser","create","getAll"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAEC,2BAAF,EAAsBC,SAAtB,EAA4BC,OAAEC,MAAF,CAAUC,gBAAV,EAAsBF,OAAEG,KAAF,CAASC,uBAAT,CAAtB,CAA5B,CAAjB;;AAEA,MAAMC,WAAW,CAAEL,OAAEM,MAAJ,EAAYP,SAAZ,EAAkBC,OAAEC,MAAF,CAAUC,gBAAV,EAAsBE,uBAAtB,CAAlB,CAAjB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAEG,GAAF,EAAOC,MAAP,EAAeC,IAAf,EAAqBC,KAArB,KAA+BC,MAArC;;AAEA;AACA,MAAMC,oBAAoBC,OACxBA,IAAIC,YAAJ,CAAiBC,IADnB;;AAGA;AACA,MAAMC,aAAaH,OAAOE,QACxBN,KAAM,CACJG,iBADI,EAEJJ,OAAQ,QAAR,EAAmBO,IAAnB,CAFI,EAGJR,IAAKU,uBAAaC,EAAlB,CAHI,CAAN,EAIIL,GAJJ,CADF;;AASA;AACA;AACA;;AAEA;AACA,MAAMM,WAAWC,SAASP,OACxBJ,KAAM,CACJG,iBADI,EAEJJ,OAAQ,QAAR,EAAmBY,KAAnB,CAFI,EAGJb,IAAMA,IAAKU,uBAAaC,EAAlB,CAAN,CAHI,CAAN,EAIIL,GAJJ,CADF;;AAOA;AACA,MAAMQ,WAAWD,SAASP,OACxBH,MAAO,CACLY,kBADK,EAELC,iBAFK,EAGLP,WAAYH,GAAZ,CAHK,CAAP,EAIIZ,YAAOiB,EAAP,CAAWE,KAAX,CAJJ,CADF;;AASA;AACA;AACA;;AAEA,MAAMI,SACJ,cAAK,QAAL,EACK,EADL,EAEKnB,QAFL,EAGKgB,QAHL,CADF;;AAMA,MAAMI,SACJ,cAAK,QAAL,EACK,EADL,EAEK5B,QAFL,EAGKsB,QAHL,CADF;;kBAMe;AACbM,QADa;AAEbD;AAFa,C","file":"user-service.js","sourcesContent":["import { $, S, Future, def } from '../fun';\r\nimport { $AppError } from '../common/types/error';\r\nimport { $Env } from '../common/types/env';\r\nimport { $CommonListRequest } from '../common/types/request';\r\nimport { $UserResponse, UserResponse } from '../common/types/response';\r\nimport { $User, validateUser, encryptUser } from '../model/user';\r\n\r\n////////////////////////////////////////////////////\r\n//  Algebra\r\n////////////////////////////////////////////////////\r\n\r\nconst getAll_A = [ $CommonListRequest, $Env, $.Future ($AppError) ($.Array ($UserResponse)) ];\r\n\r\nconst create_A = [ $.Object, $Env, $.Future ($AppError) ($UserResponse) ];\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Helpers\r\n////////////////////////////////////////////////////\r\n\r\nconst { map, invoke, pipe, pipeK } = S;\r\n\r\n// getUserRepository :: Env -> UserRepository\r\nconst getUserRepository = env => \r\n  env.repositories.user;\r\n\r\n// insertUser :: Env -> User -> Future AppError UserResponse\r\nconst insertUser = env => user =>\r\n  pipe ([ \r\n    getUserRepository,\r\n    invoke ('insert') (user),\r\n    map (UserResponse.of)\r\n  ]) (env);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Interpreter\r\n////////////////////////////////////////////////////\r\n\r\n// getAll_I :: CommonListRequest -> Env -> Future AppError (Array UserResponse)\r\nconst getAll_I = input => env => \r\n  pipe ([\r\n    getUserRepository,\r\n    invoke ('getAll') (input),\r\n    map ( map (UserResponse.of))\r\n  ]) (env);\r\n\r\n// createUser_I :: Object -> Env -> Future AppError UserResponse\r\nconst create_I = input => env =>\r\n  pipeK ([\r\n    validateUser,\r\n    encryptUser,\r\n    insertUser (env)\r\n  ]) (Future.of (input));\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Export\r\n////////////////////////////////////////////////////\r\n\r\nconst create = \r\n  def ('create')\r\n      ({})\r\n      (create_A)\r\n      (create_I);\r\n\r\nconst getAll =\r\n  def ('getAll')\r\n      ({})\r\n      (getAll_A)\r\n      (getAll_I);\r\n\r\nexport default {\r\n  getAll,\r\n  create\r\n}"]}