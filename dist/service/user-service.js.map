{"version":3,"sources":["../../src/service/user-service.js"],"names":["getAll_A","$CommonListRequest","$Env","$","Future","$AppError","Array","$UserResponse","create_A","Object","map","chain","invoke","pipe","pipeK","maybe","S","getUserRepository","env","repositories","user","toEmailInUseError","reject","ValidationError","of","insertUser","UserResponse","checkUserEmail","email","getAll_I","input","create_I","validateUser","encryptUser","create","getAll"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAEC,2BAAF,EAAsBC,SAAtB,EAA4BC,OAAEC,MAAF,CAAUC,gBAAV,EAAsBF,OAAEG,KAAF,CAASC,uBAAT,CAAtB,CAA5B,CAAjB;;AAEA,MAAMC,WAAW,CAAEL,OAAEM,MAAJ,EAAYP,SAAZ,EAAkBC,OAAEC,MAAF,CAAUC,gBAAV,EAAsBE,uBAAtB,CAAlB,CAAjB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAEG,GAAF,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,KAAnC,KAA6CC,MAAnD;;AAEA;AACA,MAAMC,oBAAoBC,OACxBA,IAAIC,YAAJ,CAAiBC,IADnB;;AAGA;AACA,MAAMC,oBAAoBD,QACxBhB,YAAOkB,MAAP,CAAeC,uBAAgBC,EAAhB,CAAoB,kCAApB,CAAf,CADF;;AAGA;AACA,MAAMC,aAAaP,OAAOE,QACxBP,KAAM,CACJI,iBADI,EAEJL,OAAQ,QAAR,EAAmBQ,IAAnB,CAFI,EAGJV,IAAKgB,uBAAaF,EAAlB,CAHI,CAAN,EAIIN,GAJJ,CADF;;AAOA;AACA,MAAMS,iBAAiBT,OAAOE,QAC5BP,KAAM,CACJI,iBADI,EAEJL,OAAQ,YAAR,EAAuBQ,KAAKQ,KAA5B,CAFI,EAGJjB,MAAOI,MAAOX,YAAOoB,EAAP,CAAWJ,IAAX,CAAP,EAA0BC,iBAA1B,CAAP,CAHI,CAAN,EAIIH,GAJJ,CADF;;AASA;AACA;AACA;;AAEA;AACA,MAAMW,WAAWC,SACfjB,KAAM,CACJI,iBADI,EAEJL,OAAQ,QAAR,EAAmBkB,KAAnB,CAFI,EAGJpB,IAAKA,IAAKgB,uBAAaF,EAAlB,CAAL,CAHI,CAAN,CADF;;AAOA;AACA,MAAMO,WAAWD,SAASZ,OACxBJ,MAAO,CACLkB,kBADK,EAELL,eAAgBT,GAAhB,CAFK,EAGLe,iBAHK,EAILR,WAAYP,GAAZ,CAJK,CAAP,EAKId,YAAOoB,EAAP,CAAWM,KAAX,CALJ,CADF;;AAUA;AACA;AACA;;AAEA,MAAMI,SACJ,cAAK,QAAL,EACK,EADL,EAEK1B,QAFL,EAGKuB,QAHL,CADF;;AAMA,MAAMI,SACJ,cAAK,QAAL,EACK,EADL,EAEKnC,QAFL,EAGK6B,QAHL,CADF;;kBAMe;AACbM,QADa;AAEbD;AAFa,C","file":"user-service.js","sourcesContent":["import { $, S, Future, def } from '../fun';\r\nimport { $AppError, ValidationError } from '../common/types/error';\r\nimport { $Env } from '../common/types/env';\r\nimport { $CommonListRequest } from '../common/types/request';\r\nimport { $UserResponse, UserResponse } from '../common/types/response';\r\nimport { $User, validateUser, encryptUser } from '../model/user';\r\n\r\n////////////////////////////////////////////////////\r\n//  Algebra\r\n////////////////////////////////////////////////////\r\n\r\nconst getAll_A = [ $CommonListRequest, $Env, $.Future ($AppError) ($.Array ($UserResponse)) ];\r\n\r\nconst create_A = [ $.Object, $Env, $.Future ($AppError) ($UserResponse) ];\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Helpers\r\n////////////////////////////////////////////////////\r\n\r\nconst { map, chain, invoke, pipe, pipeK, maybe } = S;\r\n\r\n// getUserRepository :: Env -> UserRepository\r\nconst getUserRepository = env => \r\n  env.repositories.user;\r\n\r\n// toEmailInUseError :: User -> Future ValidationError User\r\nconst toEmailInUseError = user =>\r\n  Future.reject (ValidationError.of ('This email is already being used'));\r\n\r\n// insertUser :: Env -> User -> Future AppError UserResponse\r\nconst insertUser = env => user =>\r\n  pipe ([ \r\n    getUserRepository,\r\n    invoke ('insert') (user),\r\n    map (UserResponse.of)\r\n  ]) (env);\r\n\r\n// checkUserEmail :: Env -> User -> Future AppError User\r\nconst checkUserEmail = env => user =>\r\n  pipe ([\r\n    getUserRepository,\r\n    invoke ('getByEmail') (user.email),\r\n    chain (maybe (Future.of (user)) (toEmailInUseError))\r\n  ]) (env);\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Interpreter\r\n////////////////////////////////////////////////////\r\n\r\n// getAll_I :: CommonListRequest -> Env -> Future AppError (Array UserResponse)\r\nconst getAll_I = input =>\r\n  pipe ([\r\n    getUserRepository,\r\n    invoke ('getAll') (input),\r\n    map (map (UserResponse.of))\r\n  ]);\r\n\r\n// createUser_I :: Object -> Env -> Future AppError UserResponse\r\nconst create_I = input => env =>\r\n  pipeK ([\r\n    validateUser,\r\n    checkUserEmail (env),\r\n    encryptUser,\r\n    insertUser (env)\r\n  ]) (Future.of (input));\r\n\r\n\r\n\r\n////////////////////////////////////////////////////\r\n//  Export\r\n////////////////////////////////////////////////////\r\n\r\nconst create = \r\n  def ('create')\r\n      ({})\r\n      (create_A)\r\n      (create_I);\r\n\r\nconst getAll =\r\n  def ('getAll')\r\n      ({})\r\n      (getAll_A)\r\n      (getAll_I);\r\n\r\nexport default {\r\n  getAll,\r\n  create\r\n}"]}