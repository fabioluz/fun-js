{"version":3,"sources":["../../../src/persistence/repositories/user-repository.js"],"names":["getAll_A","$CommonListRequest","$","Future","$AppError","Array","$User","getByEmail_A","String","Maybe","insert_A","prop","compose","pipe","map","head","K","S","getAll_I","commonListReq","page","take","sql","offset","params","queryResult","User","of","getByEmail_I","email","insert_I","user","id","password","fullname","getAll","getByEmail","insert"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAEC,2BAAF,EAAsBC,OAAEC,MAAF,CAAUC,gBAAV,EAAsBF,OAAEG,KAAF,CAASC,WAAT,CAAtB,CAAtB,CAAjB;;AAEA,MAAMC,eAAe,CAAEL,OAAEM,MAAJ,EAAYN,OAAEC,MAAF,CAAUC,gBAAV,EAAsBF,OAAEO,KAAF,CAASH,WAAT,CAAtB,CAAZ,CAArB;;AAEA,MAAMI,WAAW,CAAEJ,WAAF,EAASJ,OAAEC,MAAF,CAAUC,gBAAV,EAAsBE,WAAtB,CAAT,CAAjB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAEK,IAAF,EAAQC,OAAR,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,CAAlC,KAAwCC,MAA9C;;AAEA;AACA,MAAMC,WAAWC,iBAAiB;AAChC,QAAM,EAAEC,IAAF,EAAQC,IAAR,KAAiBF,aAAvB;AACA,QAAMG,MAAO;;;wBAAb;;AAKA,QAAMC,SAAS,CAACH,OAAO,CAAR,IAAaC,IAA5B;AACA,QAAMG,SAAS,CAAED,MAAF,EAAUF,IAAV,CAAf;;AAEA,QAAMI,cAAc,8BAAgB,qBAAOH,GAAP,EAAaE,MAAb,CAAhB,CAApB;;AAEA,SAAOZ,QACCE,IAAKA,IAAKY,WAAKC,EAAV,CAAL,CADD,EAECb,IAAKH,KAAM,MAAN,CAAL,CAFD,EAGCc,WAHD,CAAP;AAID,CAhBD;;AAkBA;AACA,MAAMG,eAAeC,SAAS;AAC5B,QAAMP,MAAO;;gCAAb;;AAIA,QAAME,SAAS,CAAEK,KAAF,CAAf;;AAEA,QAAMJ,cAAc,8BAAgB,qBAAOH,GAAP,EAAaE,MAAb,CAAhB,CAApB;;AAEA,SAAOX,KAAM,CACXC,IAAKH,KAAM,MAAN,CAAL,CADW,EAEXG,IAAKC,IAAL,CAFW,EAGXD,IAAKA,IAAKY,WAAKC,EAAV,CAAL,CAHW,CAAN,EAIHF,WAJG,CAAP;AAKD,CAdD;;AAgBA;AACA,MAAMK,WAAWC,QAAQ;AACvB,QAAMT,MAAM,2EAAZ;AACA,QAAME,SAAS,CAAEO,KAAKC,EAAP,EAAWD,KAAKF,KAAhB,EAAuBE,KAAKE,QAA5B,EAAsCF,KAAKG,QAA3C,CAAf;;AAEA,QAAMT,cAAc,8BAAgB,qBAAOH,GAAP,EAAaE,MAAb,CAAhB,CAApB;;AAEA,SAAOV,IAAKE,EAAGe,IAAH,CAAL,EAAgBN,WAAhB,CAAP;AACD,CAPD;;AAWA;AACA;AACA;;AAEA,MAAMU,SACJ,cAAK,QAAL,EACK,EADL,EAEKnC,QAFL,EAGKkB,QAHL,CADF;;AAMA,MAAMkB,aACJ,cAAK,YAAL,EACK,EADL,EAEK7B,YAFL,EAGKqB,YAHL,CADF;;AAMA,MAAMS,SACJ,cAAK,QAAL,EACK,EADL,EAEK3B,QAFL,EAGKoB,QAHL,CADF;;kBAMe;AACbK,QADa;AAEbC,YAFa;AAGbC;AAHa,C","file":"user-repository.js","sourcesContent":["import { $, S, def } from '../../fun';\r\nimport { $AppError } from '../../common/types/error';\r\nimport { $CommonListRequest } from '../../common/types/request';\r\nimport { $User, User } from '../../model/user';\r\nimport { withConnection, query } from '../database';\r\n\r\n///////////////////////////////////////////////////////\r\n//  Algebra\r\n///////////////////////////////////////////////////////\r\n\r\nconst getAll_A = [ $CommonListRequest, $.Future ($AppError) ($.Array ($User)) ];\r\n\r\nconst getByEmail_A = [ $.String, $.Future ($AppError) ($.Maybe ($User)) ];\r\n\r\nconst insert_A = [ $User, $.Future ($AppError) ($User) ];\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n//  Interpreter\r\n///////////////////////////////////////////////////////\r\n\r\nconst { prop, compose, pipe, map, head, K } = S;\r\n\r\n// getAll_I :: CommonListRequest -> Future DatabaseError (Array User)\r\nconst getAll_I = commonListReq => {\r\n  const { page, take } = commonListReq;\r\n  const sql = `SELECT id, email, fullname\r\n               FROM users\r\n               OFFSET $1\r\n               LIMIT $2`;\r\n\r\n  const offset = (page - 1) * take;\r\n  const params = [ offset, take ];\r\n\r\n  const queryResult = withConnection (query (sql) (params));\r\n\r\n  return compose\r\n         (map (map (User.of)))\r\n         (map (prop ('rows')))\r\n         (queryResult);\r\n};\r\n\r\n// getByEmail_I :: String -> Future DatabaseError (Maybe User)\r\nconst getByEmail_I = email => {\r\n  const sql = `SELECT id, email, fullname \r\n               FROM users \r\n               WHERE email = $1`;\r\n\r\n  const params = [ email ];\r\n\r\n  const queryResult = withConnection (query (sql) (params));\r\n\r\n  return pipe ([\r\n    map (prop ('rows')),\r\n    map (head),\r\n    map (map (User.of))\r\n  ]) (queryResult);\r\n}\r\n\r\n// insert_I :: User -> Future DatabaseError User\r\nconst insert_I = user => {\r\n  const sql = 'INSERT INTO users (id, email, password, fullname) VALUES ($1, $2, $3, $4)';\r\n  const params = [ user.id, user.email, user.password, user.fullname ];\r\n\r\n  const queryResult = withConnection (query (sql) (params));\r\n  \r\n  return map (K (user)) (queryResult);\r\n};\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n//  Export\r\n///////////////////////////////////////////////////////\r\n\r\nconst getAll =\r\n  def ('getAll')\r\n      ({})\r\n      (getAll_A)\r\n      (getAll_I);\r\n\r\nconst getByEmail =\r\n  def ('getByEmail')\r\n      ({})\r\n      (getByEmail_A)\r\n      (getByEmail_I);\r\n\r\nconst insert = \r\n  def ('insert')\r\n      ({})\r\n      (insert_A)\r\n      (insert_I);\r\n\r\nexport default {\r\n  getAll,\r\n  getByEmail,\r\n  insert\r\n}\r\n"]}