{"version":3,"sources":["../../src/persistence/database.js"],"names":["pool","Pool","openConnection","Future","encaseP","connect","bind","closeConnection","client","of","release","withConnection_A","$","Any","$DatabaseError","query_A","String","Object","compose","chainRej","S","withConnection_I","hook","toDatabaseError","reject","DatabaseError","exec","sql","params","encaseP2","query","query_I","withConnection"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,OAAO,IAAIC,QAAJ,EAAb;;AAEA;AACA,MAAMC,iBAAiBC,YAAOC,OAAP,CAAgBJ,KAAKK,OAAL,CAAaC,IAAb,CAAkBN,IAAlB,CAAhB,CAAvB;;AAEA;AACA,MAAMO,kBAAkBC,UAAUL,YAAOM,EAAP,CAAWD,OAAOE,OAAP,EAAX,CAAlC;;AAIA;AACA;AACA;;AAEA,MAAMC,mBAAmB,CAAEC,OAAEC,GAAJ,EAASD,OAAET,MAAF,CAAUW,qBAAV,EAA2BF,OAAEC,GAA7B,CAAT,CAAzB;;AAEA,MAAME,UAAU,CAAEH,OAAEI,MAAJ,EAAYJ,OAAEC,GAAd,EAAmBD,OAAEK,MAArB,EAA6BL,OAAET,MAAF,CAAUW,qBAAV,EAA2BF,OAAEK,MAA7B,CAA7B,CAAhB;;AAIA;AACA;AACA;;AAEA,MAAM,EAAEC,OAAF,EAAWC,QAAX,KAAwBC,MAA9B;;AAEA;AACA,MAAMC,mBAAmBlB,YAAOmB,IAAP,CACvBpB,gBADuB,EAEvBK,eAFuB,CAAzB;;AAKA;AACA;AACA,MAAMgB,kBAAkBL,QAASf,YAAOqB,MAAhB,EAAyBC,qBAAchB,EAAvC,CAAxB;;AAEA;AACA,MAAMiB,OAAOC,OAAOC,UAAUpB,UAC5BL,YAAO0B,QAAP,CAAiBrB,OAAOsB,KAAP,CAAaxB,IAAb,CAAkBE,MAAlB,CAAjB,EAA6CmB,GAA7C,EAAmDC,MAAnD,CADF;;AAGA;AACA,MAAMG,UAAUJ,OAAOC,UACrBV,QAASC,SAAUI,eAAV,CAAT,EACSG,KAAMC,GAAN,EAAYC,MAAZ,CADT,CADF;;AAMA;AACA;AACA;;AAEO,MAAMI,0CACX,cAAK,gBAAL,EACK,EADL,EAEKrB,gBAFL,EAGKU,gBAHL,CADK;;AAMA,MAAMS,wBACX,cAAK,OAAL,EACK,EADL,EAEKf,OAFL,EAGKgB,OAHL,CADK","file":"database.js","sourcesContent":["import { Pool } from 'pg';\r\nimport { $, S, Future, def } from '../fun';\r\nimport { $DatabaseError, DatabaseError } from '../common/types/error';\r\n\r\n/////////////////////////////////////////////////////\r\n//  Connection\r\n/////////////////////////////////////////////////////\r\n\r\nconst pool = new Pool();\r\n\r\n// openConnection :: () -> Future a Client\r\nconst openConnection = Future.encaseP (pool.connect.bind(pool));\r\n\r\n// closeConnection :: Client -> Future a Void\r\nconst closeConnection = client => Future.of (client.release());\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n//  Algebra\r\n/////////////////////////////////////////////////////\r\n\r\nconst withConnection_A = [ $.Any, $.Future ($DatabaseError) ($.Any) ];\r\n\r\nconst query_A = [ $.String, $.Any, $.Object, $.Future ($DatabaseError) ($.Object) ];\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n//  Interpreter\r\n/////////////////////////////////////////////////////\r\n\r\nconst { compose, chainRej } = S;\r\n\r\n// withConnection_I :: Client -> Future a b\r\nconst withConnection_I = Future.hook (\r\n  openConnection(),\r\n  closeConnection\r\n);\r\n\r\n// toDatabaseError :: Error -> Future DatabaseError a\r\n// const toDatabaseError = error => Future.reject (DatabaseError.of (error));\r\nconst toDatabaseError = compose (Future.reject) (DatabaseError.of);\r\n\r\n// exec :: String -> Array Any -> Client -> Future DatabseError QueryResult\r\nconst exec = sql => params => client =>\r\n  Future.encaseP2 (client.query.bind(client)) (sql) (params);\r\n\r\n// query_I :: String -> Array Any -> Client -> Future DatabseError QueryResult\r\nconst query_I = sql => params =>\r\n  compose (chainRej (toDatabaseError))\r\n          (exec (sql) (params));\r\n\r\n          \r\n\r\n////////////////////////////////////////////////////\r\n//  Export\r\n////////////////////////////////////////////////////\r\n\r\nexport const withConnection = \r\n  def ('withConnection')\r\n      ({})\r\n      (withConnection_A)\r\n      (withConnection_I);\r\n\r\nexport const query = \r\n  def ('query')\r\n      ({})\r\n      (query_A)\r\n      (query_I);"]}